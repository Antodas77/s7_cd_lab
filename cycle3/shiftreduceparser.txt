1. Initialization
 1.1. Initialize ‘input[]’, ‘stack[]’, ‘action[]’, and ‘stack_top = -1’.
 1.2. Set ‘input_len’ as the length of the input string.
2. Display Grammar
 2.1. Display the grammar:
 - ‘E -> E + E’, ‘E -> E * E’, ‘E -> (E)’, ‘E -> id’.
3. Input the String
 3.1. Prompt the user for input.
 3.2. Read the input into ‘input[]’.
4. Shift Operation
 4.1. For each character in ‘input[]’:
 4.2. If ‘id’ is found:
 - Push ‘id’ to the stack.
 - Print stack, remaining input, and action ‘SHIFT->id’.
 - Call ‘check()’ and skip ‘d’ by incrementing ‘i’ by 1.
 4.3. For other characters:
 - Push the character to the stack.
 - Print stack, remaining input, and action ‘SHIFT-><character>‘.
 - Call ‘check()’
 5. Reduction (check() Function)
 5.1. Check for handles on the stack:
- If ‘id’ → reduce to ‘E’.
 - If ‘E + E’, ‘E * E’, ‘(E)’ → reduce to ‘E’.
 5.2. If a handle is found:
 - Perform reduction and print stack, input, and action ‘REDUCE-><handle>‘.
5.3. Repeat until no further reductions are possible.
6. Final Validation
 6.1. If stack contains only ‘E’, print "VALID".
 6.2. Otherwise, print "INVALID". 
